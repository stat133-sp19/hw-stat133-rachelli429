result <- list(trials = trials,
prob = prob)
class(result) = "binvar"
return(result)
}
#' @export
print.binvar <- function(x, ...) {
cat('"Binomial Variable"\n\nParameters\n- number of trials: ', x$trials,
"\n- prob of success: ", x$prob)
}
#' @export
summary.binvar <- function(x, ...) {
trials <- x$trials
prob <- x$prob
result <- list(
trials = trials,
prob = prob,
mean = aux_mean(trials, prob),
variance = aux_variance(trials, prob),
mode = aux_mode(trials, prob),
skewness = aux_skewness(trials, prob),
kurtosis = aux_kurtosis(trials, prob)
)
class(result) = "summary.binvar"
return(result)
}
#' @export
print.summary.binvar <- function(x, ...) {
cat('"Summary Binomial"\n\nParameters\n- number of trials: ', x$trials,
"\n- prob of success: ", x$prob,
"\n\nMeasures\n- mean: ", x$mean,
"\n- variance: ", x$variance,
"\n- mode: ", x$mode,
"\n- skewness: ", x$skewness,
"\n- kurtosis: ", x$kurtosis
)
}
dis2 <- bin_cumulative(5, 0.5)
getwd()
source("checker-functions.R")
source("auxiliary-functions.R")
#' @title bin_choose
#' @description calculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials (numeric)
#' @param k number of successes (numeric vector)
#' @return number of combinations
#' @export
#' @examples
#' bin_choose(n = 5, k = 2)
#' bin_choose(5, 0)
#' bin_choose(5, 1:3)
bin_choose <- function(n, k) {
if (any(k > n)) {
stop('k cannot be greater than n')
} else {
factorial(n) / (factorial(k) * factorial(n - k))
}
}
#' @title bin_probability
#' @description computes the probability of getting k successes in n trials with probability of success prob
#' @param success number of successes (numeric vector)
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return computed probability
#' @export
#' @examples
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#' bin_probability(0:2, 5, 0.5)
#' bin_probability(55, 100, 0.45)
bin_probability <- function(success, trials, prob) {
check_trials(trials)
check_prob(prob)
check_success(success, trials)
bin_choose(trials, success) * prob ^ success * (1 - prob) ^ (trials - success)
}
#' @title bin_distribution
#' @description returns a data frame with the probability distribution of class "bindis"
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return data frame with the probability distribution
#' @export
#' @examples
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- bin_probability(0:trials, trials, prob)
result <- data.frame(success, probability)
class(result) = c("bindis", "data.frame")
return(result)
}
#' @export
plot.bindis <- function(x, ...) {
barplot(x$probability, main = "histogram of binomial distribution",
xlab = "successes", ylab = "probability",
names.arg = x$success)
}
#' @title bin_cumulative
#' @description returns a data frame with the probability distribution & cumulative probabilities, of class "bincum"
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return data frame with probability distribution & cumulative probabilities
#' @export
#' @examples
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob) {
distrib <- bin_distribution(trials, prob)
probability <- distrib$probability
cumulative <- c(probability[1])
for (i in 2:length(probability)) {
cumulative[i] <- cumulative[i - 1] + probability[i]
}
result <- data.frame(distrib, cumulative)
class(result) = c("bincum", "data.frame")
return(result)
}
#' @export
plot.bincum <- function(x, ...) {
plot(x$success, x$cumulative, type = "o",
main = "plot of cumulative distribution",
xlab = "successes", ylab = "probability",)
}
#' @title bin_variable
#' @description return list with number of trials (trials) & probability of success (prob), of class "binvar"
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return list with number of trials & probability of success
#' @export
#' @examples
#' bin_variable(trials = 10, prob = 0.3)
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
result <- list(trials = trials,
prob = prob)
class(result) = "binvar"
return(result)
}
#' @export
print.binvar <- function(x, ...) {
cat('"Binomial Variable"\n\nParameters\n- number of trials: ', x$trials,
"\n- prob of success: ", x$prob)
}
#' @export
summary.binvar <- function(x, ...) {
trials <- x$trials
prob <- x$prob
result <- list(
trials = trials,
prob = prob,
mean = aux_mean(trials, prob),
variance = aux_variance(trials, prob),
mode = aux_mode(trials, prob),
skewness = aux_skewness(trials, prob),
kurtosis = aux_kurtosis(trials, prob)
)
class(result) = "summary.binvar"
return(result)
}
#' @export
print.summary.binvar <- function(x, ...) {
cat('"Summary Binomial"\n\nParameters\n- number of trials: ', x$trials,
"\n- prob of success: ", x$prob,
"\n\nMeasures\n- mean: ", x$mean,
"\n- variance: ", x$variance,
"\n- mode: ", x$mode,
"\n- skewness: ", x$skewness,
"\n- kurtosis: ", x$kurtosis
)
}
dis2 <- bin_cumulative(5, 0.5)
setwd("~/Desktop/stat-133/hw-stat133/binomial")
dis2 <- bin_cumulative(5, 0.5)
#source("checker-functions.R")
#source("auxiliary-functions.R")
#' @title bin_choose
#' @description calculates the number of combinations in which k successes can occur in n trials
#' @param n number of trials (numeric)
#' @param k number of successes (numeric vector)
#' @return number of combinations
#' @export
#' @examples
#' bin_choose(n = 5, k = 2)
#' bin_choose(5, 0)
#' bin_choose(5, 1:3)
bin_choose <- function(n, k) {
if (any(k > n)) {
stop('k cannot be greater than n')
} else {
factorial(n) / (factorial(k) * factorial(n - k))
}
}
#' @title bin_probability
#' @description computes the probability of getting k successes in n trials with probability of success prob
#' @param success number of successes (numeric vector)
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return computed probability
#' @export
#' @examples
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#' bin_probability(0:2, 5, 0.5)
#' bin_probability(55, 100, 0.45)
bin_probability <- function(success, trials, prob) {
check_trials(trials)
check_prob(prob)
check_success(success, trials)
bin_choose(trials, success) * prob ^ success * (1 - prob) ^ (trials - success)
}
#' @title bin_distribution
#' @description returns a data frame with the probability distribution of class "bindis"
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return data frame with the probability distribution
#' @export
#' @examples
#' bin_distribution(trials = 5, prob = 0.5)
bin_distribution <- function(trials, prob) {
success <- 0:trials
probability <- bin_probability(0:trials, trials, prob)
result <- data.frame(success, probability)
class(result) = c("bindis", "data.frame")
return(result)
}
#' @export
plot.bindis <- function(x, ...) {
barplot(x$probability, main = "histogram of binomial distribution",
xlab = "successes", ylab = "probability",
names.arg = x$success)
}
#' @title bin_cumulative
#' @description returns a data frame with the probability distribution & cumulative probabilities, of class "bincum"
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return data frame with probability distribution & cumulative probabilities
#' @export
#' @examples
#' bin_cumulative(trials = 5, prob = 0.5)
bin_cumulative <- function(trials, prob) {
distrib <- bin_distribution(trials, prob)
probability <- distrib$probability
cumulative <- c(probability[1])
for (i in 2:length(probability)) {
cumulative[i] <- cumulative[i - 1] + probability[i]
}
result <- data.frame(distrib, cumulative)
class(result) = c("bincum", "data.frame")
return(result)
}
#' @export
plot.bincum <- function(x, ...) {
plot(x$success, x$cumulative, type = "o",
main = "plot of cumulative distribution",
xlab = "successes", ylab = "probability",)
}
#' @title bin_variable
#' @description return list with number of trials (trials) & probability of success (prob), of class "binvar"
#' @param trials number of trials (numeric)
#' @param prob probability of success on each trial (numeric)
#' @return list with number of trials & probability of success
#' @export
#' @examples
#' bin_variable(trials = 10, prob = 0.3)
bin_variable <- function(trials, prob) {
check_trials(trials)
check_prob(prob)
result <- list(trials = trials,
prob = prob)
class(result) = "binvar"
return(result)
}
#' @export
print.binvar <- function(x, ...) {
cat('"Binomial Variable"\n\nParameters\n- number of trials: ', x$trials,
"\n- prob of success: ", x$prob)
}
#' @export
summary.binvar <- function(x, ...) {
trials <- x$trials
prob <- x$prob
result <- list(
trials = trials,
prob = prob,
mean = aux_mean(trials, prob),
variance = aux_variance(trials, prob),
mode = aux_mode(trials, prob),
skewness = aux_skewness(trials, prob),
kurtosis = aux_kurtosis(trials, prob)
)
class(result) = "summary.binvar"
return(result)
}
#' @export
print.summary.binvar <- function(x, ...) {
cat('"Summary Binomial"\n\nParameters\n- number of trials: ', x$trials,
"\n- prob of success: ", x$prob,
"\n\nMeasures\n- mean: ", x$mean,
"\n- variance: ", x$variance,
"\n- mode: ", x$mode,
"\n- skewness: ", x$skewness,
"\n- kurtosis: ", x$kurtosis
)
}
dis2 <- bin_cumulative(5, 0.5)
source('~/Desktop/stat-133/hw-stat133/binomial/R/binomial-functions.R')
dis2 <- bin_cumulative(5, 0.5)
# private function to check if an input is a valid probability value
check_prob <- function(prob) {
if (prob >= 0 & prob <= 1) {
return(TRUE)
} else {
stop('prob must be a number between 0 and 1')
}
}
# private function to check if an input is a valid value for number of trials
check_trials <- function(trials) {
if (trials >= 0) {
return(TRUE)
} else {
stop('trials must be a non-negative integer')
}
}
# private function to check if an input is a value value for number of successes
check_success <- function(success, trials) {
if (all(success >= 0 & success <= trials)) {
TRUE
} else if (any(success > trials)) {
stop('success cannot be greater than trials')
} else if (any(success < 0)) {
stop('success must be a non-negative integer')
}
}
dis2 <- bin_cumulative(5, 0.5)
dis2
plot(dis2)
plot(dis2)
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
x <- 3
rm(list = ls())
x
library(binomial)
dis2 <- bin_cumulative(5, 0.5)
dis2
plot(dis2)
rm(list = ls())
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
remove.packages("binomial")
devtools::build()
devtools::install()
library(binomial)
bin_cumulative(5, 0.5)
setwd("~/Desktop/stat-133")
bin_cumulative(5, 0.5)
getwd()
setwd("~/Desktop/career")
bin_cumulative(5, 0.5)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(binomial)
bin_choose(n = 5, k = 2)
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_distribution(trials = 5, prob = 0.5)
plot(bin_distribution(5, 0.5))
bin_cumulative(trials = 5, prob = 0.5)
plot(bin_cumulative(trials = 5, prob = 0.5))
bin_variable(trials = 10, p = 0.3)
summary(bin_variable(trials = 10, p = 0.3))
bin_mean(10, 0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
bin_probability(success = 2, trials = 5, prob = 0.5)
m <- 0.5 * 11 + 0.5
m
typeof(m)
as.integer(m)
as.integer(m) == m
n <- 0.5 * 12 + 0.5
as.integer(n)
as.integer(n) == n
# private function to compute mean
aux_mean <- function(trials, prob) {
return(trials * prob)
}
# private function to compute variance
aux_variance <- function(trials, prob) {
(trials * prob) * (1 - prob)
}
# private function to compute mode
aux_mode <- function(trials, prob) {
m <- trials * prob + prob
if (as.integer(m) == m) {
return(c(m, m - 1))
} else {
return(as.integer(m))
}
}
# private function to compute skewness
aux_skewness <- function(trials, prob) {
(1 - 2 * prob) / sqrt(trials * prob * (1 - prob))
}
# private function to compute kurtosis
aux_kurtosis <- function(trials, prob) {
(1 - 6 * prob * (1 - prob)) / (trials * prob * (1 - prob))
}
aux_mode(7, 0.5)
aux_mode(6, 0.5)
context("summary measures")
test_that("check aux_mean works", {
expect_equal(aux_mean(10, 0.3), 3)
expect_type(aux_mean(10, 0.3), "double")
expect_length(aux_mean(10, 0.3), 1)
})
test_that("check aux_variance works", {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_type(aux_variance(10, 0.3), "double")
expect_length(aux_variance(10, 0.3), 1)
})
test_that("check aux_mode works", {
expect_equal(aux_mode(10, 0.3), 3)
expect_type(aux_mode(10, 0.3), "integer")
expect_length(aux_mode(10, 0.3), 1)
except_length(aux_mode(7, 0.5), 2)
})
test_that("check aux_skewness works", {
sk <- (1 - 2 * 0.3) / sqrt(10 * 0.3 * (1 - 0.3))
expect_equal(aux_skewness(10, 0.3), sk)
expect_type(aux_skewness(10, 0.3), "double")
expect_length(aux_skewness(10, 0.3), 1)
})
test_that("check aux_kurtosis works", {
ku <- (1 - 6 * 0.3 * (1 - 0.3)) / (10 * 0.3 * (1 - 0.3))
expect_equal(aux_kurtosis(10, 0.3), ku)
expect_type(aux_kurtosis(10, 0.3), "double")
expect_length(aux_kurtosis(10, 0.3), 1)
})
setwd("~/Desktop/stat-133/hw-stat133/binomial")
context("summary measures")
test_that("check aux_mean works", {
expect_equal(aux_mean(10, 0.3), 3)
expect_type(aux_mean(10, 0.3), "double")
expect_length(aux_mean(10, 0.3), 1)
})
test_that("check aux_variance works", {
expect_equal(aux_variance(10, 0.3), 2.1)
expect_type(aux_variance(10, 0.3), "double")
expect_length(aux_variance(10, 0.3), 1)
})
test_that("check aux_mode works", {
expect_equal(aux_mode(10, 0.3), 3)
expect_type(aux_mode(10, 0.3), "integer")
expect_length(aux_mode(10, 0.3), 1)
except_length(aux_mode(7, 0.5), 2)
})
test_that("check aux_skewness works", {
sk <- (1 - 2 * 0.3) / sqrt(10 * 0.3 * (1 - 0.3))
expect_equal(aux_skewness(10, 0.3), sk)
expect_type(aux_skewness(10, 0.3), "double")
expect_length(aux_skewness(10, 0.3), 1)
})
test_that("check aux_kurtosis works", {
ku <- (1 - 6 * 0.3 * (1 - 0.3)) / (10 * 0.3 * (1 - 0.3))
expect_equal(aux_kurtosis(10, 0.3), ku)
expect_type(aux_kurtosis(10, 0.3), "double")
expect_length(aux_kurtosis(10, 0.3), 1)
})
bin_mean(10, 0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_mode(7, 0.5)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
devtools::document()
devtools::check_man()
devtools::test()
devtools::test()
devtools::build()
devtools::install()
bin_mean(10, 0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_mode(7, 0.5)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
devtools::document()
bin_mode(7, 0.5)
devtools::document()
devtools::check_man()
devtools::test()
devtools::build_vignettes()
devtools::build()
devtools::install()
rm(list = ls())
library(binomial)
bin_mode(7, 0.5)
bin_distribution(5, 0.5)
plot(bin_distribution(5, 0.5))
plot(bin_cumulative(5, 0.5))
devtools::install_github("stat133-sp19/hw-stat133-rachelli429/tree/master/binomial", build_vignettes = TRUE)
devtools::install_github("gastonstat/cointoss", build_vignettes = TRUE)
devtools::install_github("stat133-sp19/hw-stat133-rachelli429/binomial", build_vignettes = TRUE)
library(binomial)
