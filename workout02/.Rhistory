ggplot(data = savings_simulation) + geom_line(aes(x = years, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ylim(c(30000, 60000, 90000)) + ggtitle("Timelines of 9 Savings Scenarios")
ggplot(data = savings_simulation) + geom_line(aes(x = years, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ylim(90000) + ggtitle("Timelines of 9 Savings Scenarios")
ggplot(data = savings_simulation) + geom_line(aes(x = years, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ylim(0, 90000) + ggtitle("Timelines of 9 Savings Scenarios")
ggplot(data = savings_simulation) + geom_line(aes(x = years, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~.savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
mode(savings_type)
as.factor(savings_type)
mode(savings_type)
savings_type <- as.factor(savings_type)
mode(savings_type)
savings_type <- as.factor(savings_type)
modality <- as.factor(modality)
savings_simulation <- data.frame(years, savings_type, modality, balance)
savings_simulation
savings_simulation <- data.frame(years, savings_type, modality, balance)
savings_simulation
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type, label = c(regular savings, high-yield savings, index fund)) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type, labeller = c(regular savings, high-yield savings, index fund)) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type, labeller = c("test", "lol", "what")) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type, scale = "free") + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ fct_rev(savings_type)) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
savings_type <- factor(savings_type, levels = c("regular savings", "high-yield savings", "index fund"))
modality <- factor(modality, levels = c("no_contrib", "fixed_contrib", "growing_contrib"))
savings_simulation <- data.frame(years, savings_type, modality, balance)
savings_simulation
ggplot(data = savings_simulation) + geom_line(aes(x = year, y = balance, col = modality)) + geom_point(aes(x = year, y = balance, col = modality), pch = 20) + facet_wrap(~ savings_type) + theme_bw() + ggtitle("Timelines of 9 Savings Scenarios") + scale_y_continuous(name = "balance", breaks = c(0, 30000, 60000, 90000), limits = c(0, 100000))
# data frame
year <- seq(0L, 10L)
modalities <- data.frame(year, no_contrib, fixed_contrib, growing_contrib)
modalities
ggplot(data = modalities) + geom_line(aes(x = year, y = no_contrib), col = "red") + geom_line(aes(x = year, y = fixed_contrib), col = "blue") + geom_line(aes(x = year, y = growing_contrib), col = "green") + ggtitle("Growth of Investment Modes") + xlab("year") + ylab("annual balance") + theme(legend.position = "right") + theme_minimal()
ggplot(data = modalities) + geom_line(aes(x = year, y = no_contrib)) + geom_line(aes(x = year, y = fixed_contrib)) + geom_line(aes(x = year, y = growing_contrib)) + ggtitle("Growth of Investment Modes") + xlab("year") + ylab("annual balance") + theme(legend.position = "right") + theme_minimal() + scale_colour_manual("", breaks = c("growing_contrib", "fixed_contrib", "no_contrib"), values = c("red", "green", "blue"))
ggplot(data = modalities) + geom_line(aes(x = year, y = no_contrib)) + geom_line(aes(x = year, y = fixed_contrib)) + geom_line(aes(x = year, y = growing_contrib)) + ggtitle("Growth of Investment Modes") + xlab("year") + ylab("annual balance") + theme(legend.position = "right") + theme_minimal() + scale_colour_manual(breaks = c("growing_contrib", "fixed_contrib", "no_contrib"), values = c("red", "green", "blue"))
ggplot(data = modalities) + geom_line(aes(x = year, y = no_contrib, colour = "no_contrib")) + geom_line(aes(x = year, y = fixed_contrib, colour = "fixed_contrib")) + geom_line(aes(x = year, y = growing_contrib, colour = "growing_contrib")) + ggtitle("Growth of Investment Modes") + xlab("year") + ylab("annual balance") + theme(legend.position = "right") + theme_minimal() + scale_colour_manual(breaks = c("growing_contrib", "fixed_contrib", "no_contrib"), values = c("red", "green", "blue"))
ggplot(data = modalities) + geom_line(aes(x = year, y = no_contrib, colour = "no_contrib")) + geom_line(aes(x = year, y = fixed_contrib, colour = "fixed_contrib")) + geom_line(aes(x = year, y = growing_contrib, colour = "growing_contrib")) + ggtitle("Growth of Investment Modes") + xlab("year") + ylab("annual balance") + theme(legend.position = "right") + theme_minimal() + scale_colour_manual("mode", breaks = c("growing_contrib", "fixed_contrib", "no_contrib"), values = c("red", "green", "blue"))
?seq
?rep
knitr::opts_chunk$set(echo = TRUE)
standardize <- function(x, na.rm = FALSE) {
z <- (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
return(z)
}
a <- c(2, 4, 7, 8, 9)
z <- standardize(a)
z
expect_length(z, 5)
install.packages("testthat")
library(testthat)
expect_length(z, 5)
expect_length(z, length(a))
expect_length(z, 4)
mean(z)
sd(z)
expect_equal(mean(z), 0)
expect_equal(sd(z), 1)
# character vector
standardize(c('a', 'b', 'c'))
standardize <- function(x, na.rm = FALSE) {
if (is.character(x)) {
stop("invalid input, x should be numeric")
}
z <- (x - mean(x, na.rm = na.rm)) / sd(x, na.rm = na.rm)
return(z)
}
# character vector
standardize(c('a', 'b', 'c'))
expect_error(standardize(c('a', 'b', 'c')))
y <- c(1, 2, NA)
z1 <- (y - mean(y, na.rm = FALSE)) / sd(y, na.rm = FALSE)
z2 <- (y - mean(y, na.rm = TRUE)) / sd(y, na.rm = TRUE)
expect_equal(standardize(y), z1)
expect_length(standardize(y), length(y))
expect_equal(standardize(y, na.rm = TRUE), z2)
expect_length(standardize(y, na.rm = TRUE), length(y))
expect_type(standardize(y), 'double')
shiny::runApp('Desktop/stat 133/lec demos/shinyapp')
knitr::opts_chunk$set(echo = TRUE)
head(faithful)
head(faithful)
runApp('Desktop/stat 133/lec demos/shinyapp')
runApp('Desktop/stat 133/lec demos/shinyapp')
runApp('Desktop/stat 133/lec demos/shinyapp')
runApp('Desktop/stat 133/lec demos/shinyapp')
shiny::runApp('Desktop/stat 133/lec demos/shinyapp')
knitr::opts_chunk$set(echo = TRUE)
head(mtcars)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, col = "blue")
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 5, col = "blue")
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue")
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm")
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm") + theme_bw()
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm") + theme_minimal()
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm") + theme_classic()
ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm") + theme_minimal()
gg <- ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm") + theme_minimal()
gg <- ggplot(data = mtcars, aes(x = mpg, y = disp)) + geom_point(size = 1, color = "blue") + geom_smooth(method = "lm") + theme_minimal()
gg
runApp('Desktop/stat 133/lec demos/shiny-app-2')
install.packages("colorpicker")
install.packages("colourpicker")
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
runApp('Desktop/stat 133/lec demos/shiny-app-2')
shiny::runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
install.packages("ggplot2")
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
knitr::opts_chunk$set(echo = TRUE)
initial <- 100
years <- 10
balance <- c(initial, rep(0, years))
rates <- rep(0, years)
for (y in 1:years) {
rates[y] <- rnorm(1, 0.16, 0.11)
balance[y + 1] <- balance[y] * (1 + rates[y])
}
balance
rates
# create data frame
dat <- data.frame(
year = 0:years,
rate = c(0, rates),
balance = balance
)
dat
install.packages("ggplot2")
shiny::runApp('Desktop/stat 133/lec demos/savings-simulation')
runApp('Desktop/stat 133/lec demos/savings-simulation')
runApp('Desktop/stat 133/lec demos/savings-simulation')
runApp('Desktop/stat 133/lec demos/savings-simulation')
knitr::opts_chunk$set(echo = TRUE)
x0 <- 17
x1 <- (x0 * 3) %% 64
x2 <- (x1 * 3) %% 64
x3 <- (x2 * 3) %% 64
x0 <- 17
x1 <- (x0 * 3) %% 64
x2 <- (x1 * 3) %% 64
x3 <- (x2 * 3) %% 64
c(x0, x1, x2, x3)
# n: # of random numbers you want to obtain
cong <- function(n = 1, seed = 17, a = 3, b = 64) {
x <- rep(0, n) # store random numbers
x[1] <- (seed * a) %% b
if (n == 1) {
return(x)
} else {
for (i in 2:n) {
x[i] <- (x[i - 1] * a) %% b
}
return(x)
}
}
cong(n = 3)
x3b64 <- cong(n = 20)
plot(x3b54[1:19], x3b64[2:20], xlab = "current value", ylab = "next value")
x3b64 <- cong(n = 20)
plot(x3b64[1:19], x3b64[2:20], xlab = "current value", ylab = "next value")
plot(x3b64[1:19], x3b64[2:20], xlab = "current value", ylab = "next value", col = "blue ")
random <- cong(n = 1000, a = 69069, b = 2 ^ 32)
plot(random[1:999], random[2:1000], xlab = "current value", ylab = "next value")
plot(x3b64[1:19], x3b64[2:20], xlab = "current value", ylab = "next value", col = "blue", pch = 19)
random <- cong(n = 1000, a = 69069, b = 2 ^ 32)
plot(random[1:999], random[2:1000], xlab = "current value", ylab = "next value", pch = 20, col = "blue")
x3b64 <- cong(n = 200)
x3b64 <- cong(n = 200)
plot(x3b64[1:19], x3b64[2:20], xlab = "current value", ylab = "next value", col = "blue", pch = 19)
x3b64 <- cong(n = 20)
plot(x3b64[1:19], x3b64[2:20], xlab = "current value", ylab = "next value", col = "blue", pch = 19)
random <- cong(n = 1000, a = 69069, b = 2 ^ 32)
plot(random[1:999], random[2:1000], xlab = "current value", ylab = "next value", pch = 20, col = "blue")
y = rnorm(n = 5, mean = 0, sd = 1)
y
rnorm(n = 5, mean = 0, sd = 1)
# a different 5 random values
rnorm(n = 5, mean = 0, sd = 1)
# a different 5 random values
rnorm(n = 5, mean = 0, sd = 1)
# a different 5 random values
rnorm(n = 5, mean = 0, sd = 1)
set.seed(12345)
rnorm(n = 5, mean = 0, sd = 1)
set.seed(12345)
rnorm(n = 5, mean = 0, sd = 1)
set.seed(12345)
rnorm(n = 5, mean = 0, sd = 1)
rnorm(n = 5, mean = 0, sd = 1)
set.seed(12345)
rnorm(n = 5, mean = 0, sd = 1)
shiny::runApp('Desktop/stat 133/lec demos/savings-simulation')
?set.seed
runApp('Desktop/stat 133/lec demos/savings-simulation')
runApp('Desktop/stat 133/lec demos/savings-simulation')
knitr::opts_chunk$set(echo = TRUE)
str_coin <- c("H", "T")
num_coin <- c(1, 0)
log_coin <- c(T, F)
str_coin <- c("H", "T")
num_coin <- c(1, 0)
log_coin <- c(T, F)
sample(num_coin, size = 1)
sample(num_coin, size = 10)
sample(num_coin, size = 10, replace = TRUE)
sample(str_coin, size = 10, replace = TRUE)
sample(str_coin, size = 50, replace = TRUE, prob = c(0.9, 0.1))
cumsum(tosses == "H") / 1:100
tosses <- sample(str_coin, size = 10, replace = TRUE)
# calculate cumulative frequencies
cumsum(tosses == "H") / 1:100
# calculate cumulative frequencies
freqs <- cumsum(tosses == "H") / 1:100
freqs
plot(1:100, freqs)
# calculate cumulative frequencies
freqs <- cumsum(tosses == "H") / 1:100
freqs
tosses <- sample(str_coin, size = 100, replace = TRUE)
# calculate cumulative frequencies
freqs <- cumsum(tosses == "H") / 1:100
freqs
plot(1:100, freqs)
knitr::opts_chunk$set(echo = TRUE)
character(1000)
# bags
bag1 <- c('white', 'white', 'red')
bag2 <- c(rep('white', 3), 'red')
bags <- c('bag1', 'bag2')
repetitions <- 1000
drawn_balls <- character(repetitions)
set.seed(345)
for (i in 1:repetitions) {
# select one bag
chosen_bag <- sample(bags, 1)
# draw a ball from chosen bag
if (chosen_bag == 'bag1') {
drawn_balls[i] <- sample(bag1, 1)
} else {
drawn_balls[i] <- sample(bag2, 1)
}
}
table(drawn_balls) / repetitions
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'white')
sample(box1, 4)
sample(box1, 4, replace = T)
test <- character(10)
test[1] <- sample(box1, 4, replace = T)
test[1:4] <- sample(box1, 4, replace = T)
test
test <- character(10)
test[1] <- c(sample(box1, 4, replace = T))
test
matrix(repetitions)
matrix(repetitions, 4)
matrix(nrow = repetitions, ncol = 4)
test <- matrix(nrow = 5, ncol = 4)
test[1, ] <- sample(box1, 4, replace = T)
test <- matrix(nrow = 5, ncol = 4)
test[1, ] <- sample(box1, 4, replace = T)
test
boxes <- c('box1', 'box2')
repetitions <- 1000
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
set.seed(345)
for (i in 1:repetitions) {
# generate uniform random number
random_num <- runif(1)
if (random_num > 0.5) {
drawn_balls[i, ] <- sample(box1, 4, replace = T)
} else {
drawn_balls[i, ] <- sample(box2, 4, replace = F)
}
}
drawn_balls
head(drawn_balls)
num_blue = sum(drawn_balls)
drawn_balls == "blue"
drawn_balls[drawn_balls == "blue",]
drawn_balls[drawn_balls == "blue"]
drawn_balls == "blue"
table(drawn_balls)
data.frame(drawn_balls)
balls <- data.frame(drawn_balls)
balls_df <- data.frame(drawn_balls)
head(balls_df)
balls_df[balls_df == "blue"]
balls_df == "blue"
sum(balls_df == "blue")
balls_df[1, ] == "blue "
balls_df[1, ] == "blue"
sum(balls_df[1, ] == "blue")
num_blue <- vector()
for (i in 1:nrow(balls_df)) {
num_blue[i] <- sum(balls_df[i, ] == "blue")
}
head(num_blue)
sum(num_blue)
head(num_blue)
??rowsum
rowsum(balls_df, "blue")
balls_df$num_blue <- num_blue
head(balls_df)
table(num_blue)
table(num_blue) / repetitions
freqs <- table(num_blue) / repetitions
freqs
plot(freqs)
type(freqs)
typeof(freqs)
mode(freqs)
freqs[2]
boxes <- c('box1', 'box2')
repetitions <- 1000
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
relative_freqs <- matrix(nrow = repetitions, ncol = 5)
num_blue <- vector()
set.seed(345)
for (i in 1:repetitions) {
# generate uniform random number
random_num <- runif(1)
if (random_num > 0.5) {
samp <- sample(box1, 4, replace = T)
} else {
samp <- sample(box2, 4, replace = F)
}
drawn_balls[i, ] <- samp
num_blue[i] <- sum(samp == "blue")
relative_freqs[i, ] <- table(num_blue) / i
}
test_factor <- factor()
levels(test_factor) <- 1:5
test_factor <- factor()
levels(test_factor) <- 1:5
test_factor[1] <- 3
table(test_factor)
table(test_factor) / 1
test_factor[1:3] <- 3
table(test_factor) / 1
table(test_factor) / 3
test_factor[1:3] <- c(1, 2, 3)
table(test_factor) / 3
boxes <- c('box1', 'box2')
repetitions <- 1000
drawn_balls <- matrix(nrow = repetitions, ncol = 4)
relative_freqs <- matrix(nrow = repetitions, ncol = 5)
num_blue <- factor()
levels(num_blue) <- 0:4
set.seed(345)
for (i in 1:repetitions) {
# generate uniform random number
random_num <- runif(1)
if (random_num > 0.5) {
samp <- sample(box1, 4, replace = T)
} else {
samp <- sample(box2, 4, replace = F)
}
drawn_balls[i, ] <- samp
num_blue[i] <- sum(samp == "blue")
relative_freqs[i, ] <- table(num_blue) / i
}
head(drawn_balls)
freqs <- table(num_blue) / repetitions
freqs
head(num_blue)
head(relative_freqs)
tail(relative_freqs)
install.packages("ggplot2")
library("ggplot2")
ggplot(data = relative_freqs, aes(x = 1:1000))
freqs_df <- data.frame(relative_freqs)
head(freqs_df)
colnames(freqs_df) <- 1:5
freqs_df <- data.frame(relative_freqs)
head(freqs_df)
colnames(freqs_df) <- 1:5
freqs_df <- data.frame(relative_freqs)
colnames(freqs_df) <- 1:5
head(freqs_df)
rownames(freqs_df)
?gather
??gather
ggplot(data = freqs_df, aes(x = rownames(freqs_df)))
gather(data = freqs_df, key = "number", value = "freqs")
library("tidyr")
install.packages("tidyr")
install.packages("tidyr")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
gather(data = freqs_df, key = "number", value = "freqs")
gathered <- gather(data = freqs_df, key = "number", value = "freqs")
head(gathered)
ggplot(data = gathered, aes(x = 1:1000, y = freqs)) + geom_line()
ggplot2(data = gathered, aes(x = 1:1000, y = freqs)) + geom_line()
ggplot(data = gathered, aes(x = 1:1000, y = freqs)) + geom_line()
library("ggplot2")
ggplot(data = gathered, aes(x = 1:1000, y = freqs)) + geom_line()
ggplot(data = gathered, aes(x = rep(1:1000, 5), y = freqs)) + geom_line()
ggplot(data = gathered, aes(x = 1:1000, y = freqs)) + geom_line()
gathered$reps <- rep(1:1000, 5)
gathered <- gather(data = freqs_df, key = "number", value = "freqs")
gathered$reps <- rep(1:1000, 5)
head(gathered)
gathered <- gather(data = freqs_df, key = "number", value = "freqs")
gathered$reps <- rep(1:1000, 5)
gathered
freqs_df <- data.frame(relative_freqs)
colnames(freqs_df) <- 0:4
head(freqs_df)
gathered <- gather(data = freqs_df, key = "number", value = "freqs")
gathered$reps <- rep(1:1000, 5)
gathered
ggplot(data = gathered, aes(x = reps, y = freqs)) + geom_line()
ggplot(data = gathered, aes(x = reps, y = freqs)) + geom_line(col = "number")
ggplot(data = gathered, aes(x = reps, y = freqs)) + geom_line(col = numer)
ggplot(data = gathered, aes(x = reps, y = freqs)) + geom_line(col = number)
ggplot(data = gathered, aes(x = reps, y = freqs)) + geom_line(aes(col = number))
ggplot(data = gathered, aes(x = reps, y = freqs)) + geom_line(aes(col = number)) + ggtitle("Relative frequencies of number of blue balls")
library("ggplot2")
library(tidyr)
gathered <- gather(data = freqs_df, key = "number", value = "freqs")
gathered$reps <- rep(1:1000, 5)
head(gathered)
shiny::runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
runApp('Desktop/stat 133/lec demos/lab10')
?apply
runApp('Desktop/stat 133/labs/lab10/app3.R')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/savings-simulation')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
runApp('Desktop/stat 133/lec demos/workout02')
install.packages('rsconnect')
install.packages('rsconnect')
{{ text }}
{{ text }}
library(rsconnect)
getwd()
rsconnect::deployApp('/Users/rachelli/Desktop/stat-133/workout02')
setAccountInfo
rsconnect::deployApp('/Users/rachelli/Desktop/stat-133/workout02')
?setaccountinfo
??setaccountinfo
setAccountInfo(rachelrli, 60106BD80AF97105D249CA855B03284D, XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX)
library(shiny); runApp('Desktop/stat-133/workout02/workout02.R')
